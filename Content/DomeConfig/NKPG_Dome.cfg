#####################################################################
# nDisplay config file
# 
# This file demonstrates how to set up the Unreal nDisplay config
# for the Norrk√∂ping 'bravo' dome configuration.
# The values in this file are derived from SGCT's bravo cluster 
# configuration, but re-fitted to Unreal formatting. 
# Some rounding errors might occur.
#
# Note:
# Before use, make sure all settings correspond to your system.
#####################################################################


#####################################################################
# Config info
#******************************************************************** 
# This is a config file header.
#
# Properties:
# version - specifies the version of the configuration file (UE4.xx)
#******************************************************************** 
[info] version=22


#####################################################################
# Cluster nodes
#******************************************************************** 
# Cluster node is an application instance. It's allowed to use
# multiple instances on the same PC. Sometimes its necessary.
#
# Properties:
# id       - Unique node name
# window   - Window ID
# addr     - Network address (IPv4 only)
# master   - Specifies if current node is master; default is 'false'
# port_cs  - Cluster Synchronization port (required on master node only)
# port_ss  - Swap Synchronization port (required on master node only)
# port_ce  - Cluster Events port (required on master node only)
#
# Optional properties:
# eye_swap - Swap eyes for this node; default is 'false'
# sound    - turns on/off sound for this application instance; default is 'false'
#******************************************************************** 
# Here we have 1+6 cluster nodes. Each application instance renders its
# own projection(s). Master node is on the first PC.

[cluster_node] id=master addr=172.19.2.10 window=master_wnd port_cs=41001 port_ss=41002 port_ce=41003 master=true sound=true

[cluster_node] id=proj_1 addr=172.19.2.11 window=proj_1_wnd
[cluster_node] id=proj_2 addr=172.19.2.12 window=proj_2_wnd
[cluster_node] id=proj_3 addr=172.19.2.13 window=proj_3_wnd
[cluster_node] id=proj_4 addr=172.19.2.14 window=proj_4_wnd
[cluster_node] id=proj_5 addr=172.19.2.15 window=proj_5_wnd
[cluster_node] id=proj_6 addr=172.19.2.16 window=proj_6_wnd


#####################################################################
# Application windows
#******************************************************************** 
# The window entity defines properties of application's game window.
#
# Properties:
# id         - Unique window name
# fullscreen - Fullscreen or windowed mode
# winx       - X location
# winy       - Y location
# resx       - Width
# resy       - Height
# viewports  - Array of viewports
#******************************************************************** 
[window] id=master_wnd viewports=master_vp fullscreen=false WinX=896 WinY=540 ResX=2048 ResY=1080

[window] id=proj_1_wnd viewports=proj_1_vp fullscreen=true
[window] id=proj_2_wnd viewports=proj_2_vp fullscreen=true
[window] id=proj_3_wnd viewports=proj_3_vp fullscreen=true
[window] id=proj_4_wnd viewports=proj_4_vp fullscreen=true
[window] id=proj_5_wnd viewports=proj_5_vp fullscreen=true
[window] id=proj_6_wnd viewports=proj_6_vp fullscreen=true



#####################################################################
# List of projection screens
#******************************************************************** 
# Projection screen is a rectangle which determines the camera frustum.
# Usually the projection screen has the same dimensions as an output
# display but in some cases it may differ.
#
# Properties:
# id     - unique projection screen name
# loc    - relative location to the parent component. Location is relative
#          to the VR root if no parent specified. The pivot is a screen's
#          center and the values are in meters.
# rot    - relative rotation to the parent component. Rotation is relative
#          to the VR root if no parent specified. The pivot is a screen's
#          center and the values are in degrees.
# size   - width (X) and height (Y) of the screen. Values are in meters.
#
# Optional properties:
# parent     - ID of parent component in VR hierarchy; default is VR root.
# tracker_id - ID of tracking device; no tracking by default.
# tracker_ch - ID of tracking device's channel; no tracking by default.
#******************************************************************** 
# We have 6 output displays. That means we have to have 6 projection
# screens. Sometimes it's possible to use only one projection screen
# (Nvidia mosaic/surround + projections with blending) but in this
# particular case we use regular FullHD monitors.
#
# The size here is what the projection plane would be at 10 meters from
# the center of the dome. This value might need some tuning.

[screen] id=master_scr loc="X=0,Y=0,Z=0" rot="P=0,Y=0,R=0" size="X=33.1,Y=26.48" parent=display_master

[screen] id=proj_1_scr loc="X=0,Y=0,Z=0" rot="P=0,Y=0,R=0" size="X=33.1,Y=26.48" parent=display_proj_1
[screen] id=proj_2_scr loc="X=0,Y=0,Z=0" rot="P=0,Y=0,R=0" size="X=33.1,Y=26.48" parent=display_proj_2
[screen] id=proj_3_scr loc="X=0,Y=0,Z=0" rot="P=0,Y=0,R=0" size="X=33.1,Y=26.48" parent=display_proj_3
[screen] id=proj_4_scr loc="X=0,Y=0,Z=0" rot="P=0,Y=0,R=0" size="X=33.1,Y=26.48" parent=display_proj_4
[screen] id=proj_5_scr loc="X=0,Y=0,Z=0" rot="P=0,Y=0,R=0" size="X=33.27,Y=16.515" parent=display_proj_5
[screen] id=proj_6_scr loc="X=0,Y=0,Z=0" rot="P=0,Y=0,R=0" size="X=33.27,Y=16.515" parent=display_proj_6


#####################################################################
# List of viewport configurations 
#******************************************************************** 
# Viewport is a rectangle area of game window where rendered frame is
# mapped. Usually the viewport starts at 0:0 and has the same size as
# its parent window but in some cases these settings may differ.
#
# Properties:
# id     - unique viewport name
# x      - X coordinate of viewport's top left corner
# y      - Y coordinate of viewport's top left corner
# width  - width of viewport in pixels
# height - height of viewport in pixels
#******************************************************************** 
# In this example all output displays are the same. We'll be using
# the same viewport configuration for all cluster nodes.
[viewport] id=master_vp screen=master_scr x=0 y=0 width=1920 height=1080

[viewport] id=proj_1_vp screen=proj_1_scr x=0 y=0 width=4096 height=2160
[viewport] id=proj_2_vp screen=proj_2_scr x=0 y=0 width=4096 height=2160
[viewport] id=proj_3_vp screen=proj_3_scr x=0 y=0 width=4096 height=2160
[viewport] id=proj_4_vp screen=proj_4_scr x=0 y=0 width=4096 height=2160
[viewport] id=proj_5_vp screen=proj_5_scr x=0 y=0 width=4096 height=2160
[viewport] id=proj_6_vp screen=proj_6_scr x=0 y=0 width=4096 height=2160


#####################################################################
# List of cameras 
#******************************************************************** 
# Camera is a predefined point frome where the stereoscopic view built.
# It's possible to define multiple cameras and swith the active one
# during runtime. You're free to attach any camera to a tracking device
# for head tracking. Consider a camera as a viewer's head.
#
# Properties:
# id  - unique camera name
# loc - relative location to the parent component. Location is relative
#       to the VR root if no parent specified.
# rot - relative rotation to the parent component. Rotation is relative
#       to the VR root if no parent specified.
#
# Optional properties:
# parent     - ID of parent component in VR hierarchy; default is VR root.
# tracker_id - ID of tracking device; no tracking by default.
# tracker_ch - ID of tracking device's channel; no tracking by default.
#******************************************************************** 
# we choose which camera to use as stereoscopic view base by cmdline arg 
# dc_camera=...
#This is not used, but nice to have as a fallback:
[camera] id=camera_master loc="X=0,Y=0,Z=0" parent=dome_origin

#these are specified when starting the application:
[camera] id=camera_proj_1 loc="X=0,Y=0,Z=0" parent=dpy1_rot
[camera] id=camera_proj_2 loc="X=0,Y=0,Z=0" parent=dpy2_rot
[camera] id=camera_proj_3 loc="X=0,Y=0,Z=0" parent=dpy3_rot
[camera] id=camera_proj_4 loc="X=0,Y=0,Z=0" parent=dpy4_rot
[camera] id=camera_proj_5 loc="X=0,Y=0,Z=0" parent=dpy5_rot
[camera] id=camera_proj_6 loc="X=0,Y=0,Z=0" parent=dpy6_rot


#####################################################################
# List of scene nodes nodes (hierarchy transforms) 
#******************************************************************** 
# Scene node is an actor component which is basically a transformation
# matrix. Scene nodes can be helpful to build a component hierarchy, to
# define some special places (like a socket) within VR space.
#
# It might be difficult to understand what VR space origin is. Consider
# it as a point in space where VR space starts. Any componenent listed
# in this config file is relative to its parent or this origin.
#
# Properties:
# id  - unique scene node name
# loc - relative location to the parent component. Location is relative
#       to the VR root if no parent specified.
# rot - relative rotation to the parent component. Rotation is relative
#       to the VR root if no parent specified.
#
# Optional properties:
# parent     - ID of parent component in VR hierarchy; default is VR root.
# tracker_id - ID of tracking device; no tracking by default.
# tracker_ch - ID of tracking device's channel; no tracking by default.
#******************************************************************** 
# Here we build our VR hierarchy.
[scene_node] id=dome_origin  loc="X=0,Y=0,Z=0"      rot="P=0,Y=0,R=0"


#master (forward cam)
[scene_node] id=display_master loc="X=10.0,Y=0,Z=14.593"  rot="P=0,Y=0.0,R=0"   parent=dome_origin

#dpy1
[scene_node] id=dpy1_rot loc="X=0.0,Y=0,Z=0.0"  rot="P=0,Y=-45.0,R=0"   parent=dome_origin
[scene_node] id=display_proj_1 loc="X=10.0,Y=0,Z=14.593"  rot="P=0,Y=0.0,R=0"   parent=dpy1_rot

#dpy2
[scene_node] id=dpy2_rot loc="X=0,Y=0,Z=0.0"  rot="P=0.0,Y=45.0,R=0"   parent=dome_origin
[scene_node] id=display_proj_2 loc="X=10.0,Y=0,Z=14.593"  rot="P=0.0,Y=0.0,R=0"   parent=dpy2_rot

#dpy3
[scene_node] id=dpy3_rot loc="X=0,Y=0,Z=0.0"  rot="P=0.0,Y=135.0,R=0"   parent=dome_origin
[scene_node] id=display_proj_3 loc="X=10.0,Y=0,Z=14.593"  rot="P=0.0,Y=0.0,R=0"   parent=dpy3_rot

#dpy4
[scene_node] id=dpy4_rot loc="X=0,Y=0,Z=0.0"  rot="P=0.0,Y=-135.0,R=0"   parent=dome_origin
[scene_node] id=display_proj_4 loc="X=10.0,Y=0,Z=14.593" rot="P=0,Y=0.0,R=0"   parent=dpy4_rot

#dpy5
[scene_node] id=dpy5_rot loc="X=0,Y=0,Z=0"  rot="P=48.0,Y=57.0,R=0"   parent=dome_origin
[scene_node] id=display_proj_5 loc="X=10.0,Y=0,Z=6.20" rot="P=0.0,Y=0,R=0"   parent=dpy5_rot

#dpy6
[scene_node] id=dpy6_rot loc="X=0,Y=0,Z=0"  rot="P=48.0,Y=-123.0,R=0"   parent=dome_origin
[scene_node] id=display_proj_6 loc="X=10.0,Y=0,Z=6.20" rot="P=0.0,Y=0.0,R=0"   parent=dpy6_rot


#####################################################################
# List of input devices
#******************************************************************** 
# Input devices are VRPN devices. The nDisplay supports the following
# types: analog, button and tracker. Many of physical input devices
# can be connected via VRPN.
#
# Properties:
# id    - nique device name
# type  - VRPN type (analog, button or tracker).
# addr  - address of a VRPN server which handles this particular device.
#         The value must match the following format: DEVICENAME@SERVER_ADDRESS
#         where DEVICENAME is a VRPN name of this device and SERVER_ADDRESS
#         is IPv4 address of VRPN server.
# loc   - relative location to the parent component. Location is relative
#         to the VR root if no parent specified.
# rot   - relative rotation to the parent component. Rotation is relative
#         to the VR root if no parent specified.
#
# front (tracker only) - mapping of a tracking system axis to X axis of VR origin
# right (tracker only) - mapping of a tracking system axis to Y axis of VR origin
# up    (tracker only) - mapping of a tracking system axis to Z axis of VR origin
# * The following values are allowed for axes mapping: X, -X, Y, -Y, Z, -Z
#
# Optional properties:
# remap - VRPN device channel remapping. Value format is: "from0:to0,from1:to1,...,fromN:toN".
#         For example: remap="0:3,1:4,5:2"
#******************************************************************** 
#[input] id=MAxis     type=analog  addr=Mouse0@127.0.0.1
#[input] id=MButtons  type=buttons addr=Mouse0@127.0.0.1
#[input] id=KButtons  type=buttons addr=Keyboard0@127.0.0.1 


#####################################################################
# Stereoscopic settings
#******************************************************************** 
# Properties:
# eye_dist - interoccular distance in meters
[stereo] eye_dist=0.064


#####################################################################
# General settings
#******************************************************************** 
# Properties:
# swap_sync_policy - swap synchronization policy
#                  - 0 - no synchronization
#                  - 1 - software swap synchronization
#                  - 2 - NV swap lock (Nvidia cards only, OpenGL only)
[general] swap_sync_policy=2


#####################################################################
# Network settings
#******************************************************************** 
# Optional properties:
# cln_conn_tries_amount - how many times a client tries to connect to a server
# cln_conn_retry_delay  - delay before next client connection try (milliseconds)
# game_start_timeout    - timeout before all data is loaded and game started (milliseconds)
# barrier_wait_timeout  - barrier timeout for both game and render threads (milliseconds)
[network] cln_conn_tries_amount=10 cln_conn_retry_delay=1000 game_start_timeout=10000 barrier_wait_timeout=5000


#####################################################################
# Custom arguments
#******************************************************************** 
# Any custom arguments available in runtime can be specified here.
# Format:  ARG_NAME=ARG_VAL
[custom] SampleArg1=SampleVal1 SampleArg2=SampleVal2
